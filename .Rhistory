h <- min(1, exp(-1*(Newallmistake-allmistake)/Temp)) #* q)
if(p < h){
Solution <- Newsolution
cat("\n Total mistake is", allmistake)
png(filename = paste("gif", iter, ".png"))
SudokuPlot(Solution)
dev.off()
}
Temp <- Temp*(1 - Tempdecreaserate)
iter <- iter + 1
# N_I <- N_I + 1
# }
#
# N_O <- N_O + 1
#
# q <- q*0.8
}
SudokuPlot(Solution)
cat("\n Total mistake is", allmistake)
}
SA.soduku <- function(Starting.Temp, Tempdecreaserate, Final.Temp, countmistake, GenerateNewS, MyZ, SudokuPlot){
Temp <- Starting.Temp
Solution <- MyZ
Blank <- mat.or.vec(9,9)
for(i in 1:9){
for(j in 1:9){
if(Solution[i,j] == 0){
Blank[i,j] = 1
}
}
}
for (i in 1:3) {
for (j in 1:3){
standard <- c(1:9)
Exist <- numeric()
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] != 1) {
Exist <- c(Exist, which(standard == Solution[k,l]))
}
}
}
candidate <- standard[-Exist]
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] == 1) {
if (length(candidate) != 1){
Solution[k,l] <- sample(candidate,1)
candidate <- candidate[-which(candidate == Solution[k,l])]
}else{
Solution[k,l] <- candidate
}
}
}
}
}
}
iter <- 1
while (Temp > Final.Temp){
allmistake <- countmistake(Solution)
if(allmistake == 0){
break
}
Newsolution <- GenerateNewS(Solution, Blank)
Newallmistake <- countmistake(Newsolution)
p <- runif(1)
h <- min(1, exp(-1*(Newallmistake-allmistake)/Temp)) #* q)
if(p < h){
Solution <- Newsolution
cat("\n Total mistake is", allmistake)
png(filename = paste("/gif1/", "gif", iter, ".png"))
SudokuPlot(Solution)
dev.off()
}
Temp <- Temp*(1 - Tempdecreaserate)
iter <- iter + 1
# N_I <- N_I + 1
# }
#
# N_O <- N_O + 1
#
# q <- q*0.8
}
SudokuPlot(Solution)
cat("\n Total mistake is", allmistake)
}
SA.soduku(10,0.001,0.0001,countmistake,GenerateNewS,MyZ, SudokuPlot)
SA.soduku <- function(Starting.Temp, Tempdecreaserate, Final.Temp, countmistake, GenerateNewS, MyZ, SudokuPlot){
Temp <- Starting.Temp
Solution <- MyZ
Blank <- mat.or.vec(9,9)
for(i in 1:9){
for(j in 1:9){
if(Solution[i,j] == 0){
Blank[i,j] = 1
}
}
}
for (i in 1:3) {
for (j in 1:3){
standard <- c(1:9)
Exist <- numeric()
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] != 1) {
Exist <- c(Exist, which(standard == Solution[k,l]))
}
}
}
candidate <- standard[-Exist]
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] == 1) {
if (length(candidate) != 1){
Solution[k,l] <- sample(candidate,1)
candidate <- candidate[-which(candidate == Solution[k,l])]
}else{
Solution[k,l] <- candidate
}
}
}
}
}
}
iter <- 1
while (Temp > Final.Temp){
allmistake <- countmistake(Solution)
if(allmistake == 0){
break
}
Newsolution <- GenerateNewS(Solution, Blank)
Newallmistake <- countmistake(Newsolution)
p <- runif(1)
h <- min(1, exp(-1*(Newallmistake-allmistake)/Temp)) #* q)
if(p < h){
Solution <- Newsolution
cat("\n Total mistake is", allmistake)
png(filename = paste("gif", iter, ".png"))
SudokuPlot(Solution)
dev.off()
}
Temp <- Temp*(1 - Tempdecreaserate)
iter <- iter + 1
# N_I <- N_I + 1
# }
#
# N_O <- N_O + 1
#
# q <- q*0.8
}
SudokuPlot(Solution)
cat("\n Total mistake is", allmistake)
}
SA.soduku(10,0.001,0.0001,countmistake,GenerateNewS,MyZ, SudokuPlot)
SA.soduku <- function(Starting.Temp, Tempdecreaserate, Final.Temp, countmistake, GenerateNewS, MyZ, SudokuPlot){
Temp <- Starting.Temp
Solution <- MyZ
Blank <- mat.or.vec(9,9)
for(i in 1:9){
for(j in 1:9){
if(Solution[i,j] == 0){
Blank[i,j] = 1
}
}
}
for (i in 1:3) {
for (j in 1:3){
standard <- c(1:9)
Exist <- numeric()
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] != 1) {
Exist <- c(Exist, which(standard == Solution[k,l]))
}
}
}
candidate <- standard[-Exist]
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] == 1) {
if (length(candidate) != 1){
Solution[k,l] <- sample(candidate,1)
candidate <- candidate[-which(candidate == Solution[k,l])]
}else{
Solution[k,l] <- candidate
}
}
}
}
}
}
iter <- 1
while (Temp > Final.Temp){
allmistake <- countmistake(Solution)
if(allmistake == 0){
break
}
Newsolution <- GenerateNewS(Solution, Blank)
Newallmistake <- countmistake(Newsolution)
p <- runif(1)
h <- min(1, exp(-1*(Newallmistake-allmistake)/Temp)) #* q)
if(p < h){
Solution <- Newsolution
cat("\n Total mistake is", allmistake)
png(filename = paste("gif", iter, ".png"))
SudokuPlot(Solution)
dev.off()
iter <- iter + 1
}
Temp <- Temp*(1 - Tempdecreaserate)
# N_I <- N_I + 1
# }
#
# N_O <- N_O + 1
#
# q <- q*0.8
}
SudokuPlot(Solution)
cat("\n Total mistake is", allmistake)
}
frames2gif(pathIn = "D:/study/MasterinUSC/pm520/final project/soduku", pathOut = "D:/study/MasterinUSC/pm520/final project/soduku", ImageMagick_path= "D:/Games/ImageMagick-7.0.8-Q16")
frames2gif <- function(pathIn='',
pathOut='',
ImageMagick_path='',
resize_ratio=1,
delay=40,
frameFormat='png',
everyFrame=1){
##### arguments
# pathIn: 图片所在路径
# pathOut: 生成的gif所保存的路径
# ImageMagick_path: ImageMagick convert命令所在路径
# resize_ratio: 调节gif的尺寸，默认为1。如果为0.5，gif的长度和宽度将是图片尺寸的一半
# delay: 设置帧与帧之间的时间间隔，默认为40(表示0.4s)。如果为200,那么时间间隔即为2s
# frameFormat: 图片的格式
# everyFrame: 如果为3，只使用pathIn文件夹下的第1, 4, 7，10，13帧，.....图片来制作gif，默认使用所有图片
##### return
# None
## create temp dir to store frames used to create gif.
tempdir <- paste0(pathIn, '/temp')
dir.create(tempdir)
files <- list.files(pathIn, pattern=paste0('*.', frameFormat), recursive=FALSE, full.names=TRUE)
index <- seq(1, length(files), by=everyFrame)
file.copy(files[index], tempdir)
command <- paste(ImageMagick_path,
'-resize', paste0(as.integer(100L*resize_ratio), '%'),
'-delay', delay,
paste0(tempdir,'/*.', frameFormat),
pathOut)
#system('F:R_tutorials/gif/ImageMagick-7.0.8-64bit/convert -resize 90% -delay 40 *.png result.gif')
system(command)
## delete temp dir
unlink(tempdir, recursive=TRUE, force=TRUE)
}
frames2gif(pathIn = "D:/study/MasterinUSC/pm520/final project/soduku", pathOut = "D:/study/MasterinUSC/pm520/final project/soduku", ImageMagick_path= "D:/Games/ImageMagick-7.0.8-Q16")
frames2gif(pathIn = "D:/study/MasterinUSC/pm520/final project/soduku", pathOut = "D:/study/MasterinUSC/pm520/final project/soduku", ImageMagick_path= "D:/Games/ImageMagick-7.0.8-Q16/convert")
list.files(pathIn, pattern=paste0('*.', frameFormat), recursive=FALSE, full.names=TRUE)
list.files("D:/study/MasterinUSC/pm520/final project/soduku", pattern=paste0('*.', "png"), recursive=FALSE, full.names=TRUE)
frames2gif <- function(pathIn='',
pathOut='',
ImageMagick_path='',
resize_ratio=1,
delay=40,
frameFormat='png',
everyFrame=1){
##### arguments
# pathIn: 图片所在路径
# pathOut: 生成的gif所保存的路径
# ImageMagick_path: ImageMagick convert命令所在路径
# resize_ratio: 调节gif的尺寸，默认为1。如果为0.5，gif的长度和宽度将是图片尺寸的一半
# delay: 设置帧与帧之间的时间间隔，默认为40(表示0.4s)。如果为200,那么时间间隔即为2s
# frameFormat: 图片的格式
# everyFrame: 如果为3，只使用pathIn文件夹下的第1, 4, 7，10，13帧，.....图片来制作gif，默认使用所有图片
##### return
# None
## create temp dir to store frames used to create gif.
tempdir <- paste0(pathIn, '/temp')
dir.create(tempdir)
files <- list.files(pathIn, pattern=paste0('*.', frameFormat), recursive=FALSE, full.names=TRUE)
index <- seq(1, length(files), by=everyFrame)
file.copy(files[index], tempdir)
command <- paste(ImageMagick_path,
'-resize', paste0(as.integer(100L*resize_ratio), '%'),
'-delay', delay,
paste0(tempdir,'/*.', frameFormat),
pathOut)
#system('F:R_tutorials/gif/ImageMagick-7.0.8-64bit/convert -resize 90% -delay 40 *.png result.gif')
system(command)
## delete temp dir
unlink(tempdir, recursive=TRUE, force=TRUE)
}
SA.soduku(10,0.001,0.0001,countmistake,GenerateNewS,MyZ, SudokuPlot)
frames2gif(pathIn = "D:/study/MasterinUSC/pm520/final project/soduku", pathOut = "D:/study/MasterinUSC/pm520/final project/soduku", ImageMagick_path= "D:/Games/ImageMagick-7.0.8-Q16/convert")
frames2gif(pathIn = "D:/study/MasterinUSC/pm520/final project/soduku", pathOut = "D:/study/MasterinUSC/pm520/final project/soduku/testsudoku.gif", ImageMagick_path= "D:/Games/ImageMagick-7.0.8-Q16/convert")
frames2gif(pathIn = "D:/study/MasterinUSC/pm520/final project/soduku", pathOut = "testsudoku.gif", ImageMagick_path= "D:/Games/ImageMagick-7.0.8-Q16/convert")
frames2gif(pathIn = "D:/study/MasterinUSC/pm520/final project/soduku", pathOut = "testsudoku.gif", ImageMagick_path= "D:/Games/ImageMagick-7.0.8-Q16/convert")
frames2gif <- function(pathIn='',
pathOut='',
ImageMagick_path='',
resize_ratio=1,
delay=40,
frameFormat='png',
everyFrame=1){
##### arguments
# pathIn: 图片所在路径
# pathOut: 生成的gif所保存的路径
# ImageMagick_path: ImageMagick convert命令所在路径
# resize_ratio: 调节gif的尺寸，默认为1。如果为0.5，gif的长度和宽度将是图片尺寸的一半
# delay: 设置帧与帧之间的时间间隔，默认为40(表示0.4s)。如果为200,那么时间间隔即为2s
# frameFormat: 图片的格式
# everyFrame: 如果为3，只使用pathIn文件夹下的第1, 4, 7，10，13帧，.....图片来制作gif，默认使用所有图片
##### return
# None
## create temp dir to store frames used to create gif.
tempdir <- paste0(pathIn, '/temp')
dir.create(tempdir)
files <- list.files(pathIn, pattern=paste0('*.', frameFormat), recursive=FALSE, full.names=TRUE)
index <- seq(1, length(files), by=everyFrame)
file.copy(files[index], tempdir)
command <- paste(ImageMagick_path,
'-resize', paste0(as.integer(100L*resize_ratio), '%'),
'-delay', delay,
paste0(tempdir,'/*.', frameFormat),
pathOut)
#system('F:R_tutorials/gif/ImageMagick-7.0.8-64bit/convert -resize 90% -delay 40 *.png result.gif')
system(command)
## delete temp dir
unlink(tempdir, recursive=TRUE, force=TRUE)
}
frames2gif(pathIn = "D:/study/MasterinUSC/pm520/final project/soduku/", pathOut = "testsudoku.gif", ImageMagick_path= "D:/Games/ImageMagick-7.0.8-Q16/convert")
setwd("D:/study/MasterinUSC/pm520/final project/soduku")
frames2gif(pathIn = "./", pathOut = "testsudoku.gif", ImageMagick_path= "D:/Games/ImageMagick-7.0.8-Q16/convert")
SudokuPlot <- function(z) {
cols <- ifelse(z, "blue","black")
par(mar=c(1,1,1,1), bg="white")
plot(0.5:9.5, 0.5:9.5, type="n", axes=FALSE, xlab="", ylab="")
cusr <<- par("usr"); cplt <<- par("plt")
segments(0.5:9.5, rep(0.5,10), 0.5:9.5, rep(9.5,10), col="grey")
segments(rep(0.5,10), 0.5:9.5, rep(9.5,10), 0.5:9.5, col="grey")
segments(c(0,3,6,9)+0.5, rep(0.5,4), c(0,3,6,9)+0.5, rep(9.5,4), lwd=3)
segments(rep(0.5,4), c(0,3,6,9)+0.5, rep(9.5,4), c(0,3,6,9)+0.5, lwd=3)
for (i in 1:9) for (j in 1:9) if (z[i,j]) {
if (cols[i,j]=="red") text(j, 10-i, "X", col="pink", cex=3)
text(j, 10-i, z[i,j], col=cols[i,j], font=ifelse(cols[i,j]=="blue",2,1),
cex=ifelse(cols[i,j]=="blue", 2.0, 1.8))
}
}
SudokuPlot(MyZ)
SudokuPlot2 <- function(z) {
cols <- ifelse(z, "blue","black")
par(mar=c(1,1,1,1), bg="white")
plot(0.5:9.5, 0.5:9.5, type="n", axes=FALSE, xlab="", ylab="", main = paste("conflicts", Newallmistake))
cusr <<- par("usr"); cplt <<- par("plt")
segments(0.5:9.5, rep(0.5,10), 0.5:9.5, rep(9.5,10), col="grey")
segments(rep(0.5,10), 0.5:9.5, rep(9.5,10), 0.5:9.5, col="grey")
segments(c(0,3,6,9)+0.5, rep(0.5,4), c(0,3,6,9)+0.5, rep(9.5,4), lwd=3)
segments(rep(0.5,4), c(0,3,6,9)+0.5, rep(9.5,4), c(0,3,6,9)+0.5, lwd=3)
for (i in 1:9) for (j in 1:9) if (z[i,j]) {
if (cols[i,j]=="red") text(j, 10-i, "X", col="pink", cex=3)
text(j, 10-i, z[i,j], col=cols[i,j], font=ifelse(cols[i,j]=="blue",2,1),
cex=ifelse(cols[i,j]=="blue", 2.0, 1.8))
}
}
SA.soduku <- function(Starting.Temp, Tempdecreaserate, Final.Temp, countmistake, GenerateNewS, MyZ, SudokuPlot){
Temp <- Starting.Temp
Solution <- MyZ
Blank <- mat.or.vec(9,9)
for(i in 1:9){
for(j in 1:9){
if(Solution[i,j] == 0){
Blank[i,j] = 1
}
}
}
for (i in 1:3) {
for (j in 1:3){
standard <- c(1:9)
Exist <- numeric()
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] != 1) {
Exist <- c(Exist, which(standard == Solution[k,l]))
}
}
}
candidate <- standard[-Exist]
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] == 1) {
if (length(candidate) != 1){
Solution[k,l] <- sample(candidate,1)
candidate <- candidate[-which(candidate == Solution[k,l])]
}else{
Solution[k,l] <- candidate
}
}
}
}
}
}
iter <- 1
while (Temp > Final.Temp){
allmistake <- countmistake(Solution)
if(allmistake == 0){
break
}
Newsolution <- GenerateNewS(Solution, Blank)
Newallmistake <- countmistake(Newsolution)
p <- runif(1)
h <- min(1, exp(-1*(Newallmistake-allmistake)/Temp)) #* q)
if(p < h){
Solution <- Newsolution
cat("\n Total mistake is", allmistake)
png(filename = paste("gif", iter, ".png"))
SudokuPlot2(Solution)
dev.off()
iter <- iter + 1
}
Temp <- Temp*(1 - Tempdecreaserate)
# N_I <- N_I + 1
# }
#
# N_O <- N_O + 1
#
# q <- q*0.8
}
SudokuPlot(Solution)
cat("\n Total mistake is", allmistake)
}
SA.soduku(10,0.001,0.0001,countmistake,GenerateNewS,MyZ, SudokuPlot)
SudokuPlot2 <- function(z, Newallmistake) {
cols <- ifelse(z, "blue","black")
par(mar=c(1,1,1,1), bg="white")
plot(0.5:9.5, 0.5:9.5, type="n", axes=FALSE, xlab="", ylab="", main = paste("conflicts =", Newallmistake))
cusr <<- par("usr"); cplt <<- par("plt")
segments(0.5:9.5, rep(0.5,10), 0.5:9.5, rep(9.5,10), col="grey")
segments(rep(0.5,10), 0.5:9.5, rep(9.5,10), 0.5:9.5, col="grey")
segments(c(0,3,6,9)+0.5, rep(0.5,4), c(0,3,6,9)+0.5, rep(9.5,4), lwd=3)
segments(rep(0.5,4), c(0,3,6,9)+0.5, rep(9.5,4), c(0,3,6,9)+0.5, lwd=3)
for (i in 1:9) for (j in 1:9) if (z[i,j]) {
if (cols[i,j]=="red") text(j, 10-i, "X", col="pink", cex=3)
text(j, 10-i, z[i,j], col=cols[i,j], font=ifelse(cols[i,j]=="blue",2,1),
cex=ifelse(cols[i,j]=="blue", 2.0, 1.8))
}
}
SA.soduku <- function(Starting.Temp, Tempdecreaserate, Final.Temp, countmistake, GenerateNewS, MyZ, SudokuPlot){
Temp <- Starting.Temp
Solution <- MyZ
Blank <- mat.or.vec(9,9)
for(i in 1:9){
for(j in 1:9){
if(Solution[i,j] == 0){
Blank[i,j] = 1
}
}
}
for (i in 1:3) {
for (j in 1:3){
standard <- c(1:9)
Exist <- numeric()
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] != 1) {
Exist <- c(Exist, which(standard == Solution[k,l]))
}
}
}
candidate <- standard[-Exist]
for (k in (i*3-2):(i*3)){
for (l in (j*3-2):(j*3)){
if (Blank[k,l] == 1) {
if (length(candidate) != 1){
Solution[k,l] <- sample(candidate,1)
candidate <- candidate[-which(candidate == Solution[k,l])]
}else{
Solution[k,l] <- candidate
}
}
}
}
}
}
iter <- 1
while (Temp > Final.Temp){
allmistake <- countmistake(Solution)
if(allmistake == 0){
break
}
Newsolution <- GenerateNewS(Solution, Blank)
Newallmistake <- countmistake(Newsolution)
p <- runif(1)
h <- min(1, exp(-1*(Newallmistake-allmistake)/Temp)) #* q)
if(p < h){
Solution <- Newsolution
cat("\n Total mistake is", allmistake)
png(filename = paste("gif", iter, ".png"))
SudokuPlot2(Solution, Newallmistake)
dev.off()
iter <- iter + 1
}
Temp <- Temp*(1 - Tempdecreaserate)
# N_I <- N_I + 1
# }
#
# N_O <- N_O + 1
#
# q <- q*0.8
}
SudokuPlot(Solution)
cat("\n Total mistake is", allmistake)
}
SA.soduku(10,0.001,0.0001,countmistake,GenerateNewS,MyZ, SudokuPlot)
